Message: Error in Prisma Client request: 


Invalid `f=e.match(V2t)?.[1]??"",g=e.match(H2t)?.[1]??null,v=e.match(W2t)?.[1]??null,{getPrismaClient:E,PrismaClientKnownRequestError:x,PrismaClientRustPanicError:S,PrismaClientInitializationError:C,PrismaClientValidationError:A}=require(`${c.prismaClient}/runtime/${u}`),O=Buffer.from(e,"utf-8").toString("base64"),I=(0,jN.createHash)("sha256").update()` invocation in
C:\Users\user\Desktop\next-express\backend\node_modules\prisma\build\index.js:1555:12459

  1552 For more information, check out the Getting started guide here: ${ye("https://pris.ly/d/accelerate-getting-started")}`)}else return ai(`Accelerate enabled. Use your secure API key in your Accelerate connection string to authenticate requests.
  1553 
    new e}async parse(r){let i=pe(r,{...Sr.project,"--name":String,"-n":"--name"});if(ee(i))return i;let n=await Dr(i),a=Gt(i,["--workspace","-w"]);if(ee(a))return a;let o=Gt(i,["--project","-p"]);if(ee(o))return o;let u=So(i,["--name","-n"]),c=await fr({token:n,path:`/${a}/${o}/settings/api-keys/create`,route:"_app.$organizationId_.$projectId.settings.api-keys.create",payload:{displayName:u}});if(c.error?.message)throw new Error(c.error.message);return ai(`New API Key created: ${c.data.tenantAPIKey}`)}};var UR=class e{static new(){return new e}async parse(r){let i=pe(r,{...Sr.project,"--apikey":String});if(ee(i))return i;let n=await Dr(i),a=Gt(i,["--workspace","-w"]);if(ee(a))return a;let o=Gt(i,["--project","-p"]);if(ee(o))return o;let u=Gt(i,["--apikey"]);if(ee(u))return u;let c=await fr({token:n,path:`/${a}/${o}/settings/api-keys`,route:"_app.$organizationId_.$projectId.settings.api-keys",payload:{id:u}});if(c.error?.message)throw new Error(c.error.message);return ai(`API Key ${c.data.displayName} deleted.`)}};var GR=class e{static new(){return new e}async parse(r){let i=pe(r,{...Sr.project});if(ee(i))return i;let n=await Dr(i),a=Gt(i,["--workspace","-w"]);if(ee(a))return a;let o=Gt(i,["--project","-p"]);if(ee(o))return o;let u=await fr({token:n,path:`/${a}/${o}/settings/api-keys`,route:"_app.$organizationId_.$projectId.settings.api-keys"});return console.table(u.serviceKeys.map(({id:c,displayName:p,createdAt:l})=>({id:c,createdAt:l,name:p})),["id","name","createdAt"]),""}};var zR={};la(zR,{$:()=>HR,Login:()=>F5,Logout:()=>$5,Show:()=>WR});var HR=class e{constructor(r){this.commands=r}static new(r){return new e(r)}async parse(r){return ua(this.commands,r)}};var m2e=L(f2e()),h2e=L(of()),g2e=L(require("http"));var v2e=L(X3()),L5=L(jf());var y2e=ue("prisma:cli:platform:login"),F5=class e{static new(){return new e}async parse(){let r=await E2();if(ee(r))throw r;if(r.token)return`Already authenticated. Run ${Y(Ee("prisma platform auth show --early-access"))} to see the current user.`;console.info("Authenticating to Prisma Platform CLI via browser");let i=g2e.default.createServer(),n=await(0,m2e.default)(i,0,"127.0.0.1"),a=await nlt({connection:"github",redirectTo:n.href});console.info("Visit the following URL in your browser to authenticate:"),console.info(ye(a.href));try{let[o]=await Promise.all([new Promise((c,p)=>{i.once("request",(l,f)=>{i.close(),f.setHeader("connection","close");let g=new URL(l.url||"/","http://localhost").searchParams,v=g.get("token")??"",E=g.get("error"),x=new URL("/auth/cli",kR);if(E)x.pathname+="/error",x.searchParams.set("error",E),p(new Error(E));else{let S=slt(g.get("user")??"");if(S){g.delete("token"),g.delete("user"),x.pathname+="/success";let C=new URLSearchParams({...Object.fromEntries(g.entries()),email:S.email});x.search=C.toString(),c({token:v,user:S})}else x.pathname+="/error",x.searchParams.set("error","Invalid user"),p(new Error("Invalid user"))}f.statusCode=302,f.setHeader("location",x.href),f.end()}),i.once("error",p)}),(0,v2e.default)(a.href)]),u=await p2e({token:o.token});if(ee(u))throw u;return ai(`Authentication successful for ${o.user.email}`)}catch(o){throw new Error(`Authentication failed: ${ee(o)?o.message:""}`)}}},nlt=async e=>{let r=await h2e.getSignature().catch(o=>(y2e(`await checkpoint.getSignature() failed silently with ${o}`),null)),i={client:`${L5.name}@${L5.version}`,signature:r,...e},n=Buffer.from(JSON.stringify(i),"utf-8").toString("base64"),a=new URL("/auth/cli",kR);return a.searchParams.set("state",n),a},alt=e=>{if(typeof e!="object"||e===null)return!1;let r=e;return typeof r.id=="string"&&typeof r.displayName=="string"&&typeof r.handle=="string"&&typeof r.email=="string"},slt=e=>{try{let r=JSON.parse(Buffer.from(e,"base64").toString("utf-8"));return alt(r)?r:null}catch(r){return y2e(`parseUser() failed silently with ${r}`),null}};var $5=class e{static new(){return new e}async parse(){let r=await E2();if(ee(r))throw r;return r.token?(await l2e(),ai("You have logged out")):`You are not currently logged in. Run ${Y(Ee("prisma platform auth login --early-access"))} to log in.`}};var WR=class e{static new(){return new e}async parse(r){let i=pe(r,{...Sr.global});if(ee(i))return i;let n=await Dr(i),a=await fr({token:n,path:"/settings/account",route:"_app._user.settings.account"});return console.info(`Currently authenticated as ${Y(a.user.email)}
â†’ 1555 `),Sc([["id",a.user.id],["handle",a.user.handle],["email",a.user.email],["displayName",a.user.displayName]])}};var QR={};la(QR,{$:()=>KR,Create:()=>YR,Delete:()=>XR,Show:()=>JR});var KR=class e{constructor(r){this.commands=r}static new(r){return new e(r)}async parse(r){return ua(this.commands,r)}};var YR=class e{static new(){return new e}async parse(r){let i=pe(r,{...Sr.workspace,"--name":String,"-n":"--name"});if(ee(i))return i;let n=await Dr(i),a=Gt(i,["--workspace","-w"]);if(ee(a))return a;let o=So(i,["--name","-n"]),u=await fr({token:n,path:`/${a}/overview/create`,route:"_app.$organizationId.overview.create",payload:{displayName:o}});if(u.error)throw new Error(`${u.error.name}: ${u.error.message}`);return ai(`Project ${u.data.displayName} - ${u.data.id} created.`)}};var XR=class e{static new(){return new e}async parse(r){let i=pe(r,{...Sr.project});if(ee(i))return i;let n=await Dr(i),a=Gt(i,["--workspace","-w"]);if(ee(a))return a;let o=Gt(i,["--project","-p"]);if(ee(o))return o;let u=await fr({token:n,path:`/${a}/${o}/settings/general`,route:"_app.$organizationId_.$projectId.settings.general",payload:{intent:"delete"}});if(u.error)throw new Error(`${u.error.name}: ${u.error.message}`);return ai(`Project ${u.data.displayName} - ${u.data.id} deleted.`)}};var JR=class e{static new(){return new e}async parse(r){let i=pe(r,{...Sr.workspace});if(ee(i))return i;let n=await Dr(i),a=Gt(i,["--workspace","-w"]);if(ee(a))return a;let o=await fr({token:n,path:`/${a}/overview`,route:"_app.$organizationId.overview"});return console.table(o.organization.projects.map(({id:u,displayName:c,createdAt:p})=>({id:u,createdAt:p,name:c})),["id","name","createdAt"]),""}};var tI={};la(tI,{$:()=>ZR,Show:()=>eI});var ZR=class e{constructor(r){this.commands=r}static new(r){return new e(r)}async parse(r){return ua(this.commands,r)}};var eI=class e{static new(){return new e}async parse(r){let i=pe(r,{...Sr.global});if(ee(i))return i;let n=await Dr(i),a=await fr({token:n,path:"/settings/workspaces",route:"_app._user.settings.workspaces"});return console.table(a.organizations.map(o=>({id:o.id,name:o.displayName,createdAt:o.createdAt})),["id","name","createdAt"]),""}};var j8e=require("@prisma/engines");var b2e=require("buffer");function x2e(e,r,i,n){Object.defineProperty(e,r,{get:i,set:n,enumerable:!0,configurable:!0})}var w2e={};x2e(w2e,"serializeRPCMessage",()=>nI);x2e(w2e,"deserializeRPCMessage",()=>aI);var rI="PrismaBigInt::",iI="PrismaBytes::";function nI(e){return JSON.stringify(e,(r,i)=>typeof i=="bigint"?rI+i:i?.type==="Buffer"&&Array.isArray(i?.data)?iI+b2e.Buffer.from(i.data).toString("base64"):i)}function aI(e){return JSON.parse(e,(r,i)=>typeof i=="string"&&i.startsWith(rI)?BigInt(i.substr(rI.length)):typeof i=="string"&&i.startsWith(iI)?i.substr(iI.length):i)}var I8e=L(P2e()),T9=L(b8e()),N8e=L(require("http")),k8e=L(E8e()),F8e=require("zlib");var Is=require("path");var jN=require("crypto"),P8e=L(LN());function qN(e,r,i,n){Object.defineProperty(e,r,{get:i,set:n,enumerable:!0,configurable:!0})}var A8e=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{},$N={},C9={},rc=A8e.parcelRequire1308;rc==null&&(rc=function(e){if(e in $N)return $N[e].exports;if(e in C9){var r=C9[e];delete C9[e];var i={id:e,exports:{}};return $N[e]=i,r.call(i.exports,i,i.exports),i.exports}var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n},rc.register=function(r,i){C9[r]=i},A8e.parcelRequire1308=rc);rc.register("9lTzd",function(module,exports){qN(module.exports,"guessEnginePaths",()=>guessEnginePaths),qN(module.exports,"guessPrismaClientPath",()=>guessPrismaClientPath);var $5COlq=rc("5COlq");async function guessEnginePaths({forceBinary,forceLibrary,resolveOverrides}){let queryEngineName,queryEngineType;if(forceLibrary?(queryEngineName=await $5COlq.prismaEngineName("query-engine","library"),queryEngineType="library"):forceBinary?(queryEngineName=await $5COlq.prismaEngineName("query-engine","binary"),queryEngineType="binary"):(queryEngineName=void 0,queryEngineType=void 0),!queryEngineName||!queryEngineType)return{queryEngine:void 0};let queryEnginePath;if(resolveOverrides[".prisma/client"])queryEnginePath=(0,Is.resolve)(resolveOverrides[".prisma/client"],`../${queryEngineName}`);else if(resolveOverrides["@prisma/engines"])queryEnginePath=(0,Is.resolve)(resolveOverrides["@prisma/engines"],`../../${queryEngineName}`);else{let atPrismaEnginesPath;try{atPrismaEnginesPath=eval("require.resolve('@prisma/engines')")}catch(e){throw new Error("Unable to resolve Prisma engine paths. This is a bug.")}queryEnginePath=(0,Is.resolve)(atPrismaEnginesPath`../../${queryEngineName}`)}return{queryEngine:{type:queryEngineType,path:queryEnginePath}}}function guessPrismaClientPath({resolveOverrides}){let prismaClientPath=resolveOverrides["@prisma/client"]||eval("require.resolve('@prisma/client')");return(0,Is.resolve)(prismaClientPath,"../")}});rc.register("5COlq",function(e,r){qN(e.exports,"prismaEngineName",()=>i);async function i(n,a){let o=await Ar(),u=o==="windows"?".exe":"";if(a==="library")return Ma(o,"fs");if(a==="binary")return`${n}-${o}${u}`;throw new Error(`Unknown engine type: ${a}`)}});function G2t(e){return{models:MN(e.models),enums:MN(e.enums),types:MN(e.types)}}function MN(e){let r={};for(let{name:i,...n}of e)r[i]=n;return r}var Y2=(0,P8e.debug)("prisma:studio-pcw"),V2t=/^\s*datasource\s+([^\s]+)\s*{/m,H2t=/url *= *env\("(.*)"\)/,W2t=/url *= *"(.*)"/;async function z2t({schema:e,schemaPath:r,dmmf:i,datasourceProvider:n,previewFeatures:a,datasources:o,engineType:u,paths:c,directUrl:p,versions:l}){let f=e.match(V2t)?.[1]??"",g=e.match(H2t)?.[1]??null,v=e.match(W2t)?.[1]??null,{getPrismaClient:E,PrismaClientKnownRequestError:x,PrismaClientRustPanicError:S,PrismaClientInitializationError:C,PrismaClientValidationError:A}=require(`${c.prismaClient}/runtime/${u}`),O=Buffer.from(e,"utf-8").toString("base64"),I=(0,jN.createHash)("sha256").update(
Authentication failed against database server at `localhost`, the provided database credentials for `postgres` are not valid.

Please make sure to provide valid database credentials for the database server at `localhost`.
  
Query:
{
  "modelName": "User",
  "operation": "findMany",
  "args": {
    "take": 100,
    "skip": 0,
    "select": {
      "id": true,
      "name": true,
      "email": true
    }
  }
}
  